<UserControl x:Class="VsChromium.Features.ToolWindows.SourceExplorer.SourceExplorerControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vsfx="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.12.0"
             xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.12.0"
             xmlns:wpf="clr-namespace:VsChromium.Wpf"
             xmlns:theme="clr-namespace:VsChromium.Views"
             xmlns:toolWindows="clr-namespace:VsChromium.Features.ToolWindows"
             xmlns:sourceExplorer="clr-namespace:VsChromium.Features.ToolWindows.SourceExplorer"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             d:DataContext="{d:DesignInstance sourceExplorer:SourceExplorerViewModel, IsDesignTimeCreatable=True}"
             Name="FileExplorerToolWindow"
             Background="{DynamicResource VsBrush.ToolWindowBackground}"
             Foreground="{DynamicResource VsBrush.ToolWindowText}"
             HorizontalAlignment="Stretch">
  <UserControl.Resources>
    <Style TargetType="ToggleButton">
      <Setter Property="Background" Value="{DynamicResource VsBrush.CommandBarGradient}"/>
      <Setter Property="Foreground" Value="{DynamicResource VsBrush.ButtonFace}"/>
      <Setter Property="TextElement.Foreground" Value="{DynamicResource VsBrush.CommandBarTextActiveKey}" />
      <Style.Triggers>
        <Trigger Property="IsPressed" Value="true">
          <Setter Property="BorderBrush" Value="{DynamicResource VsBrush.CommandBarBorderKey}" />
          <Setter Property="Background" Value="{DynamicResource VsBrush.CommandBarMouseDownBackgroundGradientKey}" />
          <Setter x:Uid="Setter_223" Property="TextElement.Foreground" Value="{DynamicResource VsBrush.CommandBarTextSelectedKey}"/>
        </Trigger>
        <Trigger Property="IsPressed" Value="false">
          <Setter Property="BorderBrush" Value="{DynamicResource VsBrush.CommandBarBorderKey}" />
          <Setter Property="Background" Value="{DynamicResource VsBrush.CommandBarGradient}" />
          <Setter x:Uid="Setter_223" Property="TextElement.Foreground" Value="{DynamicResource VsBrush.CommandBarTextActiveKey}"/>
        </Trigger>
      </Style.Triggers>
    </Style>
    <Style TargetType="wpf:EditableComboBox">
      <Style.Triggers>
        <!-- Override default template behavior which is hard-coded to set Foregroud
             color to "White" on "IsKeyboardFocusWithin" -->
        <Trigger Property="IsKeyboardFocusWithin" Value="true">
          <Setter Property="Foreground" Value="{DynamicResource VsBrush.ToolWindowText}"/>
        </Trigger>
      </Style.Triggers>
      <Setter Property="Foreground" Value="{DynamicResource VsBrush.ToolWindowText}"/>
      <Setter Property="Background" Value="{DynamicResource VsBrush.ComboBoxBackground}"/>
      <Setter Property="DropDownBackgroundBrush" Value="{DynamicResource VsBrush.ComboBoxBackground}"/>
      <Setter Property="ArrowBrush" Value="{DynamicResource VsBrush.ComboBoxGlyph}"/>
      <Setter Property="CursorBrush" Value="{DynamicResource VsBrush.ComboBoxBackground}"/>
      <Setter Property="BorderBackgroundBrush" Value="{DynamicResource VsBrush.ComboBoxBackground}"/>
      <Setter Property="Margin" Value="0,0,0,0"/>
      <Setter Property="IsEditable" Value="True"/>
      <Setter Property="ItemsSource" Value="{Binding Items}"/>
      <Setter Property="SelectedItem" Value="{Binding SelectedItem}"/>
      <Setter Property="Text" Value="{Binding NewItem, UpdateSourceTrigger=LostFocus}"/>
    </Style>
  </UserControl.Resources>

  <DockPanel>
    <Border DockPanel.Dock="Top" BorderBrush="Orange" BorderThickness="2,2,2,2" Visibility="{Binding Path=UpdateInfoVisibility, Mode=OneWay}">
      <StackPanel HorizontalAlignment="Stretch" Margin="2,2,2,2" Orientation="Vertical" Background="{DynamicResource VsBrush.ToolWindowBackground}">
        <TextBlock TextWrapping="Wrap">
          <Run Text="{Binding Path=UpdateInfoText, Mode=OneWay}" />
          <Hyperlink NavigateUri="{Binding Path=UpdateInfoUrl, Mode=OneWay}" RequestNavigate="Hyperlink_RequestNavigate">
            <Run Text="{Binding Path=UpdateInfoUrl, Mode=OneWay}" />
          </Hyperlink>
        </TextBlock>
      </StackPanel>
    </Border>

    <ToolBar DockPanel.Dock="Top" Background="{DynamicResource VsBrush.CommandBarGradient}" IsHitTestVisible="True">
      <Button IsTabStop="False" Click="SyncButton_Click" Foreground="{DynamicResource VsBrush.WindowText}">
        <Button.ToolTip>
          <TextBlock Text="Sync with Active Document"/>
        </Button.ToolTip>
        <Image Source="{Binding SyncButtonImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Width="16" Height="16"/>
      </Button>
      <Button IsTabStop="False" Click="RefreshFileSystemTreeButton_Click" Foreground="{DynamicResource VsBrush.WindowText}">
        <Button.ToolTip>
          <TextBlock Text="Refresh Source Explorer tree by rescanning directories"/>
        </Button.ToolTip>
        <Image Source="{Binding RefreshFileSystemTreeButtonImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Width="16" Height="16"/>
      </Button>
      <Separator Width="2" />
      <ToggleButton Content="Aa" IsChecked="{Binding MatchCase}" IsTabStop="False" Foreground="{DynamicResource VsBrush.WindowText}">
        <ToggleButton.ToolTip>
          <TextBlock Text="{Binding MatchCaseToolTip}"/>
        </ToggleButton.ToolTip>
      </ToggleButton>
      <ToggleButton Content="Word" IsChecked="{Binding MatchWholeWord}" IsTabStop="False" Foreground="{DynamicResource VsBrush.WindowText}">
        <ToggleButton.ToolTip>
          <TextBlock Text="{Binding MatchWholeWordToolTip}"/>
        </ToggleButton.ToolTip>
      </ToggleButton>
      <ToggleButton Content="Regex" IsChecked="{Binding UseRegex}" IsTabStop="False" Foreground="{DynamicResource VsBrush.WindowText}">
        <ToggleButton.ToolTip>
          <TextBlock Text="{Binding UseRegexToolTip}"/>
        </ToggleButton.ToolTip>
      </ToggleButton>
      <ToggleButton Content="Lnk" IsChecked="{Binding IncludeSymLinks}" IsTabStop="False" Foreground="{DynamicResource VsBrush.WindowText}">
        <ToggleButton.ToolTip>
          <TextBlock Text="{Binding IncludeSymLinksToolTip}"/>
        </ToggleButton.ToolTip>
      </ToggleButton>
      <Separator Width="2" />
      <Button IsTabStop="False" IsEnabled="{Binding GotoPreviousEnabled}" Click="GotoPrevious_Click" Foreground="{DynamicResource VsBrush.WindowText}">
        <Button.ToolTip>
          <TextBlock Text="Go to previous search result (Shift-F8 or Ctrl-Shift-F8)"/>
        </Button.ToolTip>
        <Image Source="{Binding GotoPreviousButtonImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Width="16" Height="16">
          <Image.Style>
            <Style TargetType="Image">
              <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Opacity" Value="0.5" />
                </Trigger>
              </Style.Triggers>
            </Style>
          </Image.Style>
        </Image>
      </Button>
      <Button IsTabStop="False" IsEnabled="{Binding GotoNextEnabled}" Click="GotoNext_Click" Foreground="{DynamicResource VsBrush.WindowText}">
        <Button.ToolTip>
          <TextBlock Text="Go to next search result (F8 or Ctrl-F8)"/>
        </Button.ToolTip>
        <Image Source="{Binding GotoNextButtonImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Width="16" Height="16">
          <Image.Style>
            <Style TargetType="Image">
              <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Opacity" Value="0.5" />
                </Trigger>
              </Style.Triggers>
            </Style>
          </Image.Style>
        </Image>
      </Button>
      <Button IsTabStop="False" IsEnabled="{Binding CancelSearchEnabled}" Click="Cancel_Click" Foreground="{DynamicResource VsBrush.WindowText}">
        <Button.ToolTip>
          <TextBlock Text="Clear current search and revert to File System view"/>
        </Button.ToolTip>
        <Image Source="{Binding CancelSearchButtonImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Width="16" Height="16">
          <Image.Style>
            <Style TargetType="Image">
              <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Opacity" Value="0.5" />
                </Trigger>
              </Style.Triggers>
            </Style>
          </Image.Style>
        </Image>
      </Button>
      <Separator Width="2" />
      <ToggleButton IsChecked="{Binding EnableChildDebugging}" IsTabStop="False">
        <ToggleButton.ToolTip>
          <TextBlock Text="Enable child-process debugging for launch/attach scenarios other than those available through the Attach to Chrome dialog."/>
        </ToggleButton.ToolTip>
        <Image Source="{Binding LightningBoltImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None"/>
      </ToggleButton>
    </ToolBar>

    <!-- SEARCH AREA -->
    <Border DockPanel.Dock="Top" BorderBrush="Gray" BorderThickness="1,1,1,1">
      <Border.Background>
        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
          <GradientStop Color="#33000000" Offset="0" />
          <GradientStop Color="#11000000" Offset="1" />
        </LinearGradientBrush>
      </Border.Background>

      <StackPanel HorizontalAlignment="Stretch" Margin="4,4,4,0" Orientation="Vertical">
        <Grid HorizontalAlignment="Stretch" Margin="0">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="0" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="80" />
            <ColumnDefinition Width="*" MinWidth="100" />
          </Grid.ColumnDefinitions>
          <!-- Row 0 -->
          <TextBlock Grid.Row="0" Grid.Column="0" Text="File name:" VerticalAlignment="Center" Foreground="{DynamicResource VsBrush.WindowText}" />
          <wpf:EditableComboBox Grid.Row="0" Grid.Column="1" x:Name="FileNamesSearch">
            <wpf:EditableComboBox.ToolTip>
              <TextBlock>
                Type file name pattern to search for. 
                <LineBreak/>
                For simple searches, the pattern may include wildcards and directory separators, e.g. &quot;bar&quot;,
                &quot;bar.*&quot;, &quot;foo/bar*&quot;, &quot;foo/**/bar.*&quot;.
                <LineBreak/>
                For regular expression searches, the pattern is a regular expression.
              </TextBlock>
            </wpf:EditableComboBox.ToolTip>
          </wpf:EditableComboBox>
          <!-- Row 1 -->
          <TextBlock Grid.Row="1" Grid.Column="0" Text="Folder name:" VerticalAlignment="Center"/>
          <wpf:EditableComboBox Grid.Row="1" Grid.Column="1" x:Name="DirectoryNamesSearch">
            <wpf:EditableComboBox.ToolTip>
              <TextBlock>
                Type directory name pattern to search for.
                <LineBreak/>
                For simple searches, the pattern may include wildcards and directory separators, e.g. &quot;foo&quot;,
                &quot;foo/bar*&quot;, &quot;foo/**/bar&quot;, &quot;/bar&quot;.
                <LineBreak/>
                For regular expression searches, the pattern is a regular expression.
              </TextBlock>
            </wpf:EditableComboBox.ToolTip>
          </wpf:EditableComboBox>
          <!-- Row 2 -->
          <TextBlock Grid.Row="2" Grid.Column="0" Text="Text search:" VerticalAlignment="Center" />
          <wpf:EditableComboBox Grid.Row="2" Grid.Column="1" x:Name="FileContentsSearch">
            <wpf:EditableComboBox.ToolTip>
              <TextBlock>
                Type text pattern to search for.
                <LineBreak/>
                For simple text searches, the pattern may include wildcards characters ('*'), e.g. 
                &quot;sometext&quot;, &quot;some*text&quot;, &quot;some\*text&quot;, &quot;some*other*text&quot;.
                <LineBreak/>
                For regular expression searches, the pattern is a regular expression.
              </TextBlock>
            </wpf:EditableComboBox.ToolTip>
          </wpf:EditableComboBox>
          <!-- Row 4 -->
          <ProgressBar 
            Grid.Row="4" 
            Grid.Column="0" 
            Grid.ColumnSpan="2" 
            IsIndeterminate="False" 
            Height="4" 
            Name="ProgressBar" 
            BorderThickness="0" 
            Visibility="Hidden" 
            IsTabStop="False" Margin="-4,0" />
        </Grid>
      </StackPanel>
    </Border>

    <!-- 'RootNode' is the property name of the control's DataContext instance. -->
    <TreeView
      ItemsSource="{Binding RootNodes}"
      Name="FileTreeView" Height="Auto"
      VirtualizingStackPanel.IsVirtualizing="True"
      VirtualizingStackPanel.VirtualizationMode="Recycling"
      Background="{DynamicResource VsBrush.ToolWindowBackground}"
      Foreground="{DynamicResource VsBrush.WindowText}"
      PreviewKeyDown="FileTreeView_OnPreviewKeyDown"
      PreviewMouseRightButtonDown="FileTreeView_PreviewMouseRightButtonDown">

      <TreeView.ItemContainerStyle>

        <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
          <!-- Start: This part is the behavior we customize for VsChromium -->
          <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
          <Setter Property="FontWeight" Value="Normal" />
          <Setter Property="Foreground" Value="{DynamicResource VsBrush.WindowText}" />
          <EventSetter Event="PreviewMouseDoubleClick" Handler="TreeViewItem_PreviewMouseDoubleClick"/>
          <EventSetter Event="RequestBringIntoView" Handler="TreeViewItem_RequestBringIntoView"/>
          <!-- End: This part is the behavior we customize for VsChromium -->

          <!-- Start: TreeView custom template -->
          <!-- See http://goo.gl/CzQnBG -->
          <Setter Property="HorizontalContentAlignment" Value="Left" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="TreeViewItem">
                <StackPanel>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" MinWidth="19" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition />
                    </Grid.RowDefinitions>
                    <!--
                             Note that the following do not work, but I believe the top 2 should?!
                             <ToggleButton IsChecked="{TemplateBinding IsExpanded}" ClickMode="Press" Name="Expander">
                             <ToggleButton IsChecked="{TemplateBinding Property=IsExpanded}" ClickMode="Press" Name="Expander">
                             <ToggleButton IsChecked="{TemplateBinding Path=IsExpanded}" ClickMode="Press" Name="Expander">
                        -->
                    <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          ClickMode="Press"
                          Name="Expander">
                      <ToggleButton.Style>
                        <Style TargetType="ToggleButton">
                          <Setter Property="UIElement.Focusable" Value="false" />
                          <Setter Property="FrameworkElement.Width" Value="16" />
                          <Setter Property="FrameworkElement.Height" Value="16" />
                          <Setter Property="Control.Template">
                            <Setter.Value>
                              <ControlTemplate TargetType="ToggleButton">
                                <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                  <Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
                                    <Path.Data>
                                      <PathGeometry Figures="M0,0L0,6L6,0z" />
                                    </Path.Data>
                                    <Path.RenderTransform>
                                      <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                    </Path.RenderTransform>
                                  </Path>
                                </Border>
                                <ControlTemplate.Triggers>
                                  <Trigger Property="UIElement.IsMouseOver" Value="True">
                                    <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF1BBBFA" />
                                    <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#00FFFFFF" />
                                  </Trigger>
                                  <Trigger Property="ToggleButton.IsChecked" Value="True">
                                    <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                      <Setter.Value>
                                        <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                      </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#FF595959" />
                                    <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF262626" />
                                  </Trigger>
                                </ControlTemplate.Triggers>
                              </ControlTemplate>
                            </Setter.Value>
                          </Setter>
                        </Style>
                      </ToggleButton.Style>
                    </ToggleButton>
                    <Border x:Name="Bd"
                    HorizontalAlignment="Stretch"
                    BorderThickness="{TemplateBinding Border.BorderThickness}"
                    BorderBrush="{TemplateBinding Border.BorderBrush}"
                    Padding="{TemplateBinding Control.Padding}"
                    Background="{TemplateBinding Panel.Background}"
                    SnapsToDevicePixels="True"
                    Grid.Column="1">
                      <ContentPresenter x:Name="PART_Header"
                                Content="{TemplateBinding HeaderedContentControl.Header}"
                                ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                    <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                  </Grid>
                </StackPanel>
                <ControlTemplate.Triggers>
                  <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                    <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                  </Trigger>
                  <Trigger Property="ItemsControl.HasItems" Value="False">
                    <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                  </Trigger>
                  <Trigger Property="TreeViewItem.IsSelected" Value="True">
                    <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.HighlightKey}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.HighlightTextKey}}" />
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="TreeViewItem.IsSelected" Value="True" />
                      <Condition Property="Selector.IsSelectionActive" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static theme:VsResources.SelectedItemBackground}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                  </MultiTrigger>
                  <Trigger Property="UIElement.IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <!-- See http://goo.gl/CzQnBG -->
          <!-- End: TreeView custom template -->
        </Style>

      </TreeView.ItemContainerStyle>

      <TreeView.Resources>

        <HierarchicalDataTemplate DataType="{x:Type sourceExplorer:DirectoryEntryViewModel}" ItemsSource="{Binding Children}">
          <StackPanel Orientation="Horizontal">
            <StackPanel.ContextMenu>
              <ContextMenu>
                <MenuItem Header="Show in Source Explorer" Command="{Binding OpenCommand}" FontWeight="Bold" />
                <MenuItem Header="Open Containing Folder" Command="{Binding OpenContainingFolderCommand}" />
                <Separator />
                <MenuItem Header="Copy Full Path" Command="{Binding CopyFullPathCommand}" />
                <MenuItem Header="Copy Relative Path" Command="{Binding CopyRelativePathCommand}" />
                <MenuItem Header="Copy Full Path with &quot;/&quot;" Command="{Binding CopyFullPathPosixCommand}" />
                <MenuItem Header="Copy Relative Path  with &quot;/&quot;" Command="{Binding CopyRelativePathPosixCommand}" />
              </ContextMenu>
            </StackPanel.ContextMenu>
            <Image Width="16" Height="16" Margin="3,0" Source="{Binding ImageSourcePath}" />
            <TextBlock Text="{Binding DisplayText}" />
          </StackPanel>
        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate DataType="{x:Type sourceExplorer:FileEntryViewModel}" ItemsSource="{Binding Children}">
          <StackPanel Orientation="Horizontal" >
            <StackPanel.ContextMenu>
              <ContextMenu>
                <MenuItem Header="Open" Command="{Binding OpenCommand}" FontWeight="Bold" />
                <MenuItem Header="Show in Source Explorer" Command="{Binding ShowInSourceExplorer}" />
                <MenuItem Header="Open Containing Folder" Command="{Binding OpenContainingFolderCommand}" />
                <Separator />
                <MenuItem Header="Copy Full Path" Command="{Binding CopyFullPathCommand}" />
                <MenuItem Header="Copy Relative Path" Command="{Binding CopyRelativePathCommand}" />
                <MenuItem Header="Copy Full Path with &quot;/&quot;" Command="{Binding CopyFullPathPosixCommand}" />
                <MenuItem Header="Copy Relative Path  with &quot;/&quot;" Command="{Binding CopyRelativePathPosixCommand}" />
              </ContextMenu>
            </StackPanel.ContextMenu>
            <Image Width="16" Height="16" Margin="3,0" Source="{Binding ImageSourcePath}" />
            <TextBlock Text="{Binding DisplayText}" />
          </StackPanel>
        </HierarchicalDataTemplate>

        <Style x:Key="SearchTextResult" TargetType="TextBlock">
          <Setter Property="FontFamily" Value="Consolas"/>
          <Setter Property="FontSize" Value="13"/>
        </Style>
        <DataTemplate DataType="{x:Type sourceExplorer:FilePositionViewModel}">
          <StackPanel Orientation="Horizontal">
            <StackPanel.ContextMenu>
              <ContextMenu>
                <MenuItem Header="Open" Command="{Binding OpenCommand}" FontWeight="Bold" />
                <MenuItem Header="Copy" Command="{Binding CopyCommand}"/>
              </ContextMenu>
            </StackPanel.ContextMenu>
            <Image Width="16" Height="16" Margin="3,0" Source="{Binding ImageSourcePath}"/>
            <TextBlock Text="{Binding TextBeforeMatch}" Style="{StaticResource SearchTextResult}"/>
            <TextBlock Text="{Binding MatchText}" Style="{StaticResource SearchTextResult}"
                       Foreground="{DynamicResource {x:Static theme:VsResources.SearchMatchHighlightForeground}}"
                       Background="{DynamicResource {x:Static theme:VsResources.SearchMatchHighlightBackground}}" />
            <TextBlock Text="{Binding TextAfterMatch}" Style="{StaticResource SearchTextResult}"/>
          </StackPanel>
        </DataTemplate>

        <HierarchicalDataTemplate DataType="{x:Type toolWindows:TextErrorItemViewModel}" ItemsSource="{Binding Children}">
          <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Margin="3,0" Source="{Binding ImageSourcePath}" />
            <TextBlock Text="{Binding Text}" />
          </StackPanel>
        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate DataType="{x:Type toolWindows:TextWarningItemViewModel}" ItemsSource="{Binding Children}">
          <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Margin="3,0" Source="{Binding ImageSourcePath}" />
            <TextBlock Text="{Binding Text}" />
          </StackPanel>
        </HierarchicalDataTemplate>

        <!-- Placeholder item used to show "Click here for more results" -->
        <DataTemplate DataType="{x:Type toolWindows:LazyItemViewModel}">
          <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Margin="3,0" Source="{Binding ImageSourcePath}" />
            <TextBlock Text="{Binding Text}" />
          </StackPanel>
        </DataTemplate>

        <!-- Simple text string item -->
        <DataTemplate DataType="{x:Type toolWindows:TextItemViewModel}">
          <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Margin="3,0" Source="{Binding ImageSourcePath}" />
            <TextBlock Text="{Binding Text}" />
          </StackPanel>
        </DataTemplate>

      </TreeView.Resources>
    </TreeView>

  </DockPanel>
</UserControl>
